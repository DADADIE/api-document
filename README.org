
[[README-cn.org][中文说明]]

** comment

People who have maintained the project should have experience.
If the interface documentation is written separately (org-mode, markdown, rap or even word),
as the project cycle progresses, the gap between the interface document and the real code will come the farther away.

This document collection application has appeared because some of the details based on swagger are not so good
(such as unable to process map, swagger-ui view response instructions need to be cut).

** useage

add this maven config
#+BEGIN_SRC xml
<dependency>
    <groupId>com.github.liuanxin</groupId>
    <artifactId>api-document</artifactId>
    <version>0.2.4</version>
</dependency>
#+END_SRC

add config for this
#+BEGIN_SRC java
@Configuration
@EnableApiInfo
public class ApiInfoConfig {
    @Bean
    public DocumentCopyright apiCopyright() {
        return new DocumentCopyright("title", "team", "version", "copyright")
                    // if true, api will return nil(when production use) default was false.
                    // .setOnline(true)
                    // if method has @ApiResponses, use that
                    // setGlobalResponse(Arrays.asList(
                    //         new DocumentResponse(400, "param error"),
                    //         new DocumentResponse(500, "request error")
                    // ))
                    // if some interface can't use @ApiIgnore, set this(url|method, method can be ignore)
                    // .setIgnoreUrlSet(Sets.newHashSet("/user*", "/product/info|post"))
                    ;
    }
}
#+END_SRC

Then mark the corresponding annotations in the corresponding controller layer (only collect the documents related to @RestController or @ResponseBody related classes and interfaces,
If the result of the method is List, Set or Map will be processed by ArrayList, HashSet and HashMap.

PS: The return type on the method is a ResponseEntity class. Classes that have no default no-argument construct will not be processed (
You can refer to the global processing of [[https://github.com/liuanxin/api-document-example][example]]
In addition, when there is an array of non-base data types in the return value, you cannot use the List instead.

annotation for this
#+BEGIN_EXAMPLE
@ApiGroup   --> in class or method. use the method if all of that
  value     --> module info, must set
  index     --> more forward when smaller


@ApiResponses --> in class or method
@ApiResponse
  code
  msg

for example:
@ApiResponses({
    @ApiResponse(code = 400, msg = "param error"),
    @ApiResponse(code = 500, msg = "request error")
})


@ApiIgnore  --> want to ignore some api, use it
  value     --> false will ignore

@ApiMethod  --> in method
  title     --> must set
  develop
  desc
  index     --> more forward when smaller
  commentInReturnExample  --> if false, comment will show with display separately, default true

@ApiParam   --> in param or field
  value     --> must set
  name      --> if set, will ignore param name or filed name
  dataType  --> if type was custom can use(for example: enum, but param type was be int)
  must      --> if param annotation @RequestParam(required = true) etc... will ignore this config
  textarea  --> default false

@ApiParamIgnore --> in param or field

@ApiReturn  --> in field
  value     --> must set
  type      --> if type was custom can use(for example: enum, but param type was be int)

@ApiReturnIgnore --> in field
#+END_EXAMPLE

if not spring boot project, add this config
#+BEGIN_SRC xml
<mvc:resources mapping="/static/**" location="classpath:/static/" />
#+END_SRC
request --> http://ip:port/static/api-info-en.html(spring boot don't need /static second directory).
if want to test url info, request --> http://ip:port/static/api-info-en-example.html

-----

Final document collect for this
[[###][https://raw.githubusercontent.com/liuanxin/image/master/api.png]]
-
[[###][https://raw.githubusercontent.com/liuanxin/image/master/api2.png]]
-
[[###][https://raw.githubusercontent.com/liuanxin/image/master/api-example.gif]]
-----

gl hf...
